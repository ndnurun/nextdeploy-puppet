acl purge {
  "127.0.0.1";
}

backend default {
  .host = "127.0.0.1";
  .port = "8080";
  .max_connections = 250;
  .connect_timeout = 300s;
  .first_byte_timeout = 300s;
  .between_bytes_timeout = 300s;
}

<% if @backends and @backends.size > 0 -%>
  <%- @backends.each do |backend| -%>
  <% if backend["path"] != "default" -%>
  # <%= backend["absolute"] %>
  backend <%= backend["path"] %> {
    .host = "127.0.0.1";
    .port = "<%= backend["port"] %>";
    .max_connections = 250;
    .connect_timeout = 300s;
    .first_byte_timeout = 300s;
    .between_bytes_timeout = 300s;
  }
  <%- end -%>
  <%- end -%>
<% end -%>

sub vcl_recv {
  // Rename the incoming XFF header to work around a Varnish bug.
  if (req.http.X-Forwarded-For) {
    // Append the client IP
    set req.http.X-Real-Forwarded-For = req.http.X-Forwarded-For+", "+req.http.Client_IP;
    unset req.http.X-Forwarded-For;
  }
  else {
    // Simply use the client IP
    set req.http.X-Real-Forwarded-For = req.http.Client_IP;
  }

  # Si la requete est PURGE, on trie
  if (req.request == "PURGE") {
    if (!client.ip ~ purge) {
      error 405 "Not allowed.";
    }
    #Ajout de la commande de purge
    ban("req.url ~ "+req.url);
  }

  # Options de securite :
  # On accepte que les requetes GET POST et HEAD, le reste est jete

  if (req.request != "GET" &&
      req.request != "POST" &&
      req.request != "OPTIONS" &&
      req.request != "HEAD" &&
      req.request != "DELETE" &&
      req.request != "PATCH" &&
      req.request != "PUT") {
        error 405 "Not allowed";
  }

  // backend and ipfilter
  set req.backend = default;
  <% if @backends and @backends.size > 0 -%>
    <%- @backends.each do |backend| -%>
    if (req.http.host == "<%= backend["absolute"] %>"<% if backend["aliases"] and ! backend["aliases"].empty? -%><%- backend["aliases"].each do |serveralias| -%> || req.http.host == "<%= serveralias %>"<%- end -%><% end -%> ) {
      set req.backend = <%= backend["path"] %>;

      # return pass if OPTIONS
      if (req.request == "OPTIONS") { return(pass); }

      # bypass fb and googleplus
      if (req.http.User-Agent ~ "^facebook" || req.http.User-Agent ~ "Firefox/6.0 Google \(\+https://developers") {
       return(pipe) ;
      }
      <% if backend["ipfilter"] and backend["ipfilter"] != '' -%>
      // ip filter
      if (req.http.X-Real-Forwarded-For !~ "(<%= backend["ipfilter"].gsub(' ', '|') %>)") { error 405;}
      <% end -%>
    }
    <%- end -%>
  <% end -%>


  # Auth part
  if (req.http.host ~ "^pmtools\.") {
    if (! req.http.Authorization ~ "Basic <%= @basicauth %>") { error 401 ;}
    unset req.http.Authorization;
    return (pipe);
  }
  <% if @isauth  -%>
  if (client.ip != "127.0.0.1" && ! req.http.Authorization ~ "Basic <%= @basicauth %>") { error 401 ;}
  unset req.http.Authorization;
  <% end -%>

  # Implementing websocket support
  if (req.http.Upgrade ~ "(?i)websocket") {
    return (pipe);
  }

  if ((req.request == "POST" || req.request == "PUT") && req.http.transfer-encoding ~ "chunked") {
    return(pipe);
  }

  # Return pipe for large binary file
  if (req.url ~ "^/[^?]+\.(gz|zip|mp4|bz2|tgz|tbz|flv|f4v|ogg)(\?.*|)$") {
    return(pipe);
  }

  # pipe for uploads
  if (req.http.Content-Type ~ "multipart/form-data") {
    return(pipe);
  }

  <% if ! @iscached  -%>
  return (pass);
  <% end -%>

  # Tout ce qui n'est pas GET ou HEAD ne sera pas mis en cache
  # On utilise la directive PASS et non PIPE
  if (req.request != "GET" &&
      req.request != "HEAD") {
        return (pass);
  }

  # On normalise les header de compression GZIP
  # A cause de IE et FF qui ne sont pas normalises
  if (req.http.Accept-Encoding) {
    if (req.http.Accept-Encoding ~ "gzip") {
      set req.http.Accept-Encoding = "gzip";
    }
    elsif (req.http.Accept-Encoding ~ "deflate") {
      set req.http.Accept-Encoding = "deflate";
    }
    else {
      # Algorithme de compression inconnu : on supprime
      unset req.http.Accept-Encoding;
    }
  }

  if (req.backend.healthy) {
    set req.grace = 60s;
  }
  else {
    set req.grace = 30m;
  }

  # Si requete Expect, on pipe sur le backend
  if (req.http.Expect) {
    return (pipe);
  }

  # Force look-up if request is a no-cache request.
  #if (req.http.Cache-Control ~ "no-cache") {
  #    return (pass);
  #}

  # Do not allow outside access to cron.php or install.php. Depending on your access to the server, you might want to comment-out this block of code for development.
  if (req.url ~ "^/(cron|install|app_dev)\.php")
  {
      # Throw error directly:
      error 404 "Page not found.";
      # Or;
      # Use a custom error page on path /error-404.
      # set req.url = "/error-404";
  }

    # Some generic URL manipulation, useful for all templates that follow
  # First remove the Google Analytics added parameters, useless for our backend
  if (req.url ~ "(\?|&)(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=") {
    set req.url = regsuball(req.url, "&(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=([A-z0-9_\-\.%25]+)", "");
    set req.url = regsuball(req.url, "\?(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=([A-z0-9_\-\.%25]+)", "?");
    set req.url = regsub(req.url, "\?&", "?");
    set req.url = regsub(req.url, "\?$", "");
  }

  # Strip hash, server doesn't need it.
  if (req.url ~ "\#") {
    set req.url = regsub(req.url, "\#.*$", "");
  }

  # Strip a trailing ? if it exists
  if (req.url ~ "\?$") {
    set req.url = regsub(req.url, "\?$", "");
  }

  # Remove certain cookies.
  set req.http.Cookie = regsuball(req.http.Cookie, "has_js=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "Drupal.toolbar.collapsed=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "__utm.=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "(^|;[ \t\r\n\v\f]*)(__[a-z]+|NSC_[a-z0-9A-Z-]+)=[^;]*", "");
  set req.http.Cookie = regsub(req.http.Cookie, "^;[ \t\r\n\v\f]*", "");
  ## Remove empty cookies.
  if (req.http.Cookie ~ "^[ \t\r\n\v\f]*$") {
    unset req.http.Cookie;
  }

  if (req.http.cookie ~ "^ *$") {
      unset req.http.cookie;
  }

  # Cache static content of themes.
  if (req.url ~ "^/themes/" && req.url ~ ".(css|js|png|gif|jp(e)?g)")
  {
      unset req.http.cookie;
  }

  # Do not cache these URL paths.
  if (req.url ~ "^/status\.php$" ||
      req.url ~ "^/update\.php$" ||
      req.url ~ "^/ooyala/ping$" ||
      req.url ~ "^/admin"        ||
      req.url ~ "^/admin/.*$"    ||
      req.url ~ "^/user"         ||
      req.url ~ "^/user/.*$"     ||
      req.url ~ "^/users/.*$"    ||
      req.url ~ "^/info/.*$"     ||
      req.url ~ "^/flag/.*$"     ||
      req.url ~ "^.*/ajax/.*$"   ||
      req.url ~ "^.*/ahah/.*$")
  {
      return (pass);
  }

  # Cache the following file types.
  if (req.url ~ "(?i)\.(png|gif|jpeg|jpg|ico|swf|css|js|html|htm)(\?[a-z0-9]+)?$")
  {
      unset req.http.Cookie;
  }

  # !! Do not cache application area
  if (req.url ~ "(^/app.php|^/app_dev.php|^)/([a-z]{2})/(payment|order|booking|media|autocomplete|monitor).*")
  {
      return (pass);
  }

  # !! Do not cache admin area
  if (req.url ~ "(^/app.php|^/app_dev.php|^)/admin" || req.url ~ "(^/app.php|^/app_dev.php|^)/(([a-z]{2})/admin)")
  {
      return (pass);
  }

  # !! Do not cache security area
  if (req.url ~ "(^/app.php|^/app_dev.php|^)/(([a-z]{2}/|)(login|logout|login_check).*)")
  {
      return (pass);
  }

  # Do not cache editor logged-in user sessions
  if (req.http.Cookie ~ "(sonata_page_is_editor)")
  {
      return (pass);
  }


  if (req.http.Cookie ~ "SESS") {
        return(pass);
  }

  if (req.http.Authorization) {
    # Not cacheable by default
    return (pass);
  }

  <% if ! @iscached  -%>
  return (pass);
  <% end -%>

  return(lookup);
}
# ================================
sub vcl_pipe {
#    # Note that only the first request to the backend will have
#    # X-Forwarded-For set.  If you use X-Forwarded-For and want to
#    # have it set for all requests, make sure to have:
#    # here.  It is not set by default as it might break some broken web
#    # applications, like IIS with NTLM authentication.
  set bereq.http.connection = "close";

  # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)
      if (req.http.upgrade) {
          set bereq.http.upgrade = req.http.upgrade;
      }
  return (pipe);
}
# ================================
sub vcl_pass {
  # L'objet n'est pas en cache, donc on veut un fectch
  # complet et pas un 304
  # RFC2616 14.X
  unset req.http.If-Match;
  unset req.http.If-Modified-Since;
  unset req.http.If-None-Match;
  unset req.http.If-Range;
  unset req.http.If-Unmodified-Since;
  # On passe la requete.
  return (pass);
}

# ================================
sub vcl_hash {
  hash_data(req.url);

  if (req.http.host) {
    hash_data(req.http.host);
  } else {
    hash_data(server.ip);
  }

  # hash cookies for requests that have them
  if (req.http.Cookie) {
    hash_data(req.http.Cookie);
  }

  return (hash);
}

# ================================
sub vcl_hit {
  # Si requete 'purge' on place le TTL a 0s
  if (req.request == "PURGE") {
          set obj.ttl = 0s;
          error 200 "Purged.";
  }

  # Si objet non cachable, on passe au backend
  if (obj.ttl == 0s) {
     return (pass);
  }

  # Finalement on delivre l'objet en cache
  return (deliver);
}


# ================================
sub vcl_miss {
  # L'objet n'est pas en cache, donc on veut un fectch
  # complet et pas un 304
  # RFC2616 14.X
  unset req.http.If-Match;
  unset req.http.If-Modified-Since;
  unset req.http.If-None-Match;
  unset req.http.If-Range;
  unset req.http.If-Unmodified-Since;
  # Si requete 'purge' et objet pas en cache, retour code 404
  if (req.request == "PURGE") {
    error 404 "Not in cache.";
  }
  # On va sur le backend
  return (fetch);
}

# ================================
sub vcl_fetch {
 set beresp.grace = 30s;

  # rules for cross-domain requests
  set beresp.http.Access-Control-Allow-Origin = req.http.origin ;
  set beresp.http.Access-Control-Allow-Methods = "GET,PUT,POST,DELETE,PATCH,OPTIONS" ;
  set beresp.http.Access-Control-Max-Age = "1";
  set beresp.http.Access-Control-Allow-Credentials = "true";
  set beresp.http.Access-Control-Allow-Headers = "accept, authorization";

  # set default ttl for static files
  if (beresp.http.Cache-Control ~ "public" && req.url ~ "(?i)\.(png|gif|jpeg|jpg|ico|swf|css|js|html|htm)(\?[a-z0-9]+)?$") {
    set beresp.ttl = <%= @staticttl %>;
  }

  # Si l'objet ne peut etre mis en cache
  # http code != 200, 203, 300, 301, 302, 404 ou 410
  # Util pour debug les politiques de caches
  if (beresp.ttl <= 0s || (beresp.status != 200 && beresp.status != 404)) {
     set beresp.http.X-Cacheable = "NO:Not Cacheable";
     set beresp.ttl = 120s;
     return(hit_for_pass);
  }
  elsif (beresp.http.Cache-Control ~ "private" ||
          beresp.http.Cache-Control ~ "no-cache" ||
          beresp.http.Cache-Control ~ "no-store") {
     set beresp.http.X-Cacheable = "NO:Cache-Control=private";
     return(hit_for_pass);
  }
  else {
    set beresp.http.X-Cacheable = "YES";
    if(beresp.status == 404) {
        set beresp.ttl = 10m;
    }
  }

  # Par defaut, on ajoute au cache
  return(deliver);
}

sub vcl_deliver {
  # On tag le temps du debug
  if (obj.hits > 0) {
     set resp.http.X-Cache = "HIT";
  } else {
     set resp.http.X-Cache = "MISS";
  }

  if ( resp.http.Cache-control ~ "public|private" ) {
    <% if @iscached && @isprod  -%>
    if (req.url !~ "^/[^?]+\.(pdf|doc|gz|zip|otf|lzma|bz2|tgz|tbz|jpg|jpeg|gif|png|css|js|swf)(\?.*|)") {
    <% end -%>
      unset resp.http.Etag;
      unset resp.http.Age;
      unset resp.http.Cache-Control;
      set resp.http.Cache-Control = "no-cache, no-store, max-age=0, must-revalidate";
    <% if @iscached && @isprod  -%>
    }
    <% end -%>
  }

  if ( resp.http.Cache-Control ~ "^max-age=[0-9]+$" ) {
    set resp.http.Cache-Control = regsub( resp.http.Cache-Control, "^max-age=([0-9]+)$", "public, max-age=\1" );
  }

  # On delivre la reposne de la requete au client
  # On supprime les header trop indiscrets
  unset resp.http.Server;
  unset resp.http.X-Powered-By;
  unset resp.http.via;
  unset resp.http.X-Varnish;
  unset resp.http.Served-by;
  # On delivre au client
  return (deliver);
}

sub vcl_error {

if (obj.status == 401) {
  set obj.http.Content-Type = "text/html; charset=utf-8";
  set obj.http.WWW-Authenticate = "Basic realm=Secured";
  synthetic {"

 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd">

 <HTML>
 <HEAD>
 <TITLE>Error</TITLE>
 <META HTTP-EQUIV='Content-Type' CONTENT='text/html;'>
 </HEAD>
 <BODY><H1>401 Unauthorized (varnish)</H1></BODY>
 </HTML>
 "};
  return (deliver);
}

return (deliver);
}
