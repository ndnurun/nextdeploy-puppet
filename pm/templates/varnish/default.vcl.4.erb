vcl 4.0;
# Based on: https://github.com/mattiasgeniar/varnish-4.0-configuration-templates/blob/master/default.vcl
# Corrected & improved for 4.0.2 by jnerin@gmail.com
import std;
import directors;

backend default {
  .host = "127.0.0.1";
  .port = "8080";
  .max_connections = 300;
  .first_byte_timeout     = 300s;
  .connect_timeout        = 300s;
  .between_bytes_timeout  = 300s;
}

backend jenkins {
  .host = "127.0.0.1";
  .port = "9294";
  .max_connections = 300;
  .first_byte_timeout     = 300s;
  .connect_timeout        = 300s;
  .between_bytes_timeout  = 300s;
}

backend sonar {
  .host = "127.0.0.1";
  .port = "9000";
  .max_connections = 300;
  .first_byte_timeout     = 300s;
  .connect_timeout        = 300s;
  .between_bytes_timeout  = 300s;
}

<% if @backends and @backends.size > 0 -%>
  <%- @backends.each do |backend| -%>
  <% if backend["path"] != "default" -%>
  # <%= backend["absolute"] %>
  backend <%= backend["path"] %> {
    .host = "127.0.0.1";
    .port = "<%= backend["port"] %>";
    .max_connections = 250;
    .connect_timeout = 300s;
    .first_byte_timeout = 300s;
    .between_bytes_timeout = 300s;
  }
  <%- end -%>
  <%- end -%>
<% end -%>

acl purge {
# ACL we'll use later to allow purges
  "localhost";
  "127.0.0.1";
  "::1";
}

sub vcl_recv {

  if (req.restarts == 0) {
    if (req.http.X-Forwarded-For) { # set or append the client.ip to X-Forwarded-For header
      set req.http.X-Forwarded-For = req.http.X-Forwarded-For + ", " + client.ip;
    } else {
      set req.http.X-Forwarded-For = client.ip;
    }
  }

  <% if @isoffline -%>
  return (synth(721, "https://<%= @offlineuri %>"));
  <%- end -%>

  // backend and ipfilter
  set req.backend_hint = default;
  <% if @backends and @backends.size > 0 -%>
    <%- @backends.each do |backend| -%>
    if (req.http.host == "<%= backend["absolute"] %>"<% if backend["aliases"] and ! backend["aliases"].empty? -%><%- backend["aliases"].each do |serveralias| -%> || req.http.host == "<%= serveralias %>"<%- end -%><% end -%> ) {
      <% if backend["is_redir_alias"] -%>
        if (req.http.host != "<%= backend["absolute"] %>") {
          return (synth(720, "http://" + "<%= backend["absolute"] %>"));
        }
      <%- end -%>

      <% if backend["is_ssl"] -%>
      # Redirect http to https
      if (!req.http.X-Forwarded-Proto || req.http.X-Forwarded-Proto != "https") {
        return (synth(720, "https://" + req.http.host + req.url));
      }
      <%- else -%>
      # Redirect https to http
      if (req.http.X-Forwarded-Proto && req.http.X-Forwarded-Proto == "https") {
        return (synth(720, "http://" + req.http.host + req.url));
      }
      <%- end -%>

      set req.backend_hint = <%= backend["path"] %>;

      # return pass if OPTIONS
      if (req.method == "OPTIONS") { return(pass); }

      # bypass fb and googleplus
      if (req.http.User-Agent ~ "PhantomJS" || req.http.User-Agent ~ "^facebook" || req.http.User-Agent ~ "Firefox/6.0 Google \(\+https://developers") {
       return(pipe) ;
      }
      <% if backend["ipfilter"] and backend["ipfilter"] != '' -%>
      // ip filter
      if (req.http.X-Forwarded-For !~ "(<%= backend["ipfilter"].gsub(' ', '|') %>)") { return (synth(405, "Error 405")) ;}
      <% end -%>
    }
    <%- end -%>
  <% end -%>

  # Normalize the header, remove the port (in case you're testing this on various TCP ports)
  set req.http.Host = regsub(req.http.Host, ":[0-9]+", "");

  # Jenkins backend
  if (req.http.host ~ "jenkins") {
    if (! req.http.Authorization ~ "Basic <%= @basicauth %>") { return (synth(401, "Error 401")) ;}
    unset req.http.Authorization;

    set req.backend_hint = jenkins;
    return (pipe);
  }

  # Sonar backend
  if (req.http.host ~ "sonar") {
    if (! req.http.Authorization ~ "Basic <%= @basicauth %>") { return (synth(401, "Error 401")) ;}
    unset req.http.Authorization;

    set req.backend_hint = sonar;
    return (pipe);
  }

  # Auth part
  if (req.http.Host ~ "^pmtools") {
    if (! req.http.Authorization ~ "Basic <%= @basicauth %>") { return (synth(401, "Error 401")) ;}
    unset req.http.Authorization;
    return (pipe);
  }
  <% if @isauth  -%>
  if (client.ip != "127.0.0.1" && ! req.http.Authorization ~ "Basic <%= @basicauth %>") { return (synth(401, "Error 401")) ;}
  unset req.http.Authorization;
  <% end -%>

  # Allow purging
  if (req.method == "PURGE") {
    if (!client.ip ~ purge) { # purge is the ACL defined at the begining
      # Not from an allowed IP? Then die with an error.
      return (synth(405, "This IP is not allowed to send PURGE requests."));
    }
    # If you got this stage (and didn't error out above), purge the cached result
    return (purge);
  }

    # pipe for uploads
  if (req.http.Content-Type ~ "multipart/form-data") {
    return(pipe);
  }

  if ((req.method == "POST" || req.method == "PUT") && req.http.transfer-encoding ~ "chunked") {
    return(pipe);
  }

  # Do not allow outside access to cron.php or install.php. Depending on your access to the server, you might want to comment-out this block of code for development.
  if (req.url ~ "^/(cron|install|app_dev)\.php")
  {
      # Throw error directly:
      return (synth(404, "Page not found."));
  }

  <% if ! @iscached  -%>
  return (pass);
  <% end -%>

  # Only deal with "normal" types
  if (req.method != "GET" &&
      req.method != "HEAD" &&
      req.method != "PUT" &&
      req.method != "POST" &&
      req.method != "TRACE" &&
      req.method != "OPTIONS" &&
      req.method != "PATCH" &&
      req.method != "DELETE") {
    /* Non-RFC2616 or CONNECT which is weird. */
    return (pipe);
  }

  # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)
  if (req.http.Upgrade ~ "(?i)websocket") {
          return (pipe);
      }

  # Only cache GET or HEAD requests. This makes sure the POST requests are always passed.
  if (req.method != "GET" && req.method != "HEAD") {
    return (pass);
  }


  # Some generic URL manipulation, useful for all templates that follow
  # First remove the Google Analytics added parameters, useless for our backend
  if (req.url ~ "(\?|&)(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=") {
    set req.url = regsuball(req.url, "&(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=([A-z0-9_\-\.%25]+)", "");
    set req.url = regsuball(req.url, "\?(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=([A-z0-9_\-\.%25]+)", "?");
    set req.url = regsub(req.url, "\?&", "?");
    set req.url = regsub(req.url, "\?$", "");
  }

  # Strip hash, server doesn't need it.
  if (req.url ~ "\#") {
    set req.url = regsub(req.url, "\#.*$", "");
  }

  # Strip a trailing ? if it exists
  if (req.url ~ "\?$") {
    set req.url = regsub(req.url, "\?$", "");
  }

  # Some generic cookie manipulation, useful for all templates that follow
  # Remove the "has_js" cookie
  set req.http.Cookie = regsuball(req.http.Cookie, "has_js=[^;]+(; )?", "");

  # Remove any Google Analytics based cookies
  set req.http.Cookie = regsuball(req.http.Cookie, "__utm.=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "_ga=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "utmctr=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "utmcmd.=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "utmccn.=[^;]+(; )?", "");

  # Remove DoubleClick offensive cookies
  set req.http.Cookie = regsuball(req.http.Cookie, "__gads=[^;]+(; )?", "");

  # Remove the Quant Capital cookies (added by some plugin, all __qca)
  set req.http.Cookie = regsuball(req.http.Cookie, "__qc.=[^;]+(; )?", "");

  # Remove the AddThis cookies
  set req.http.Cookie = regsuball(req.http.Cookie, "__atuv.=[^;]+(; )?", "");

  # Remove a ";" prefix in the cookie if present
  set req.http.Cookie = regsuball(req.http.Cookie, "^;\s*", "");

  # Are there cookies left with only spaces or that are empty?
  if (req.http.cookie ~ "^\s*$") {
    unset req.http.cookie;
  }

  # Normalize Accept-Encoding header
  # straight from the manual: https://www.varnish-cache.org/docs/3.0/tutorial/vary.html
  # TODO: Test if it's still needed, Varnish 4 now does this by itself if http_gzip_support = on
  # https://www.varnish-cache.org/docs/trunk/users-guide/compression.html
  # https://www.varnish-cache.org/docs/trunk/phk/gzip.html
  if (req.http.Accept-Encoding) {
    if (req.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg)$") {
      # No point in compressing these
      unset req.http.Accept-Encoding;
    } elsif (req.http.Accept-Encoding ~ "gzip") {
      set req.http.Accept-Encoding = "gzip";
    } elsif (req.http.Accept-Encoding ~ "deflate") {
      set req.http.Accept-Encoding = "deflate";
    } else {
      # unkown algorithm
      unset req.http.Accept-Encoding;
    }
  }

  # Force look-up if request is a no-cache request.
  #if (req.http.Cache-Control ~ "no-cache")
  #{
  #    return (pass);
  #}

  if (req.http.Cache-Control ~ "(?i)no-cache") {
  #if (req.http.Cache-Control ~ "(?i)no-cache" && client.ip ~ editors) { # create the acl editors if you want to restrict the Ctrl-F5
  # http://varnish.projects.linpro.no/wiki/VCLExampleEnableForceRefresh
  # Ignore requests via proxy caches and badly behaved crawlers
  # like msnbot that send no-cache with every request.
    if (! (req.http.Via || req.http.User-Agent ~ "(?i)bot" || req.http.X-Purge)) {
      #set req.hash_always_miss = true; # Doesn't seems to refresh the object in the cache
      return(purge); # Couple this with restart in vcl_purge and X-Purge header to avoid loops
    }
  }

  # Large static files are delivered directly to the end-user without
  # waiting for Varnish to fully read the file first.
  # Varnish 4 fully supports Streaming, so set do_stream in vcl_backend_response()
  if (req.url ~ "^[^?]*\.(mp[34]|rar|tar|tgz|gz|wav|zip|bz2|xz|7z|avi|mov|ogm|mpe?g|mk[av])(\?.*)?$") {
    unset req.http.Cookie;
    return (hash);
  }

  # Cache static content of themes.
  if (req.url ~ "^/themes/" && req.url ~ ".(css|js|png|gif|jp(e)?g)")
  {
      unset req.http.cookie;
  }

  # Do not cache these URL paths.
  if (req.url ~ "^/status\.php$" ||
      req.url ~ "^/update\.php$" ||
      req.url ~ "^/ooyala/ping$" ||
      req.url ~ "^/admin"        ||
      req.url ~ "^/admin/.*$"    ||
      req.url ~ "^/user"         ||
      req.url ~ "^/user/.*$"     ||
      req.url ~ "^/users/.*$"    ||
      req.url ~ "^/info/.*$"     ||
      req.url ~ "^/flag/.*$"     ||
      req.url ~ "^.*/ajax/.*$"   ||
      req.url ~ "^.*/ahah/.*$")
  {
      return (pass);
  }

  # Cache the following file types.
  if (req.url ~ "(?i)\.(png|gif|jpeg|jpg|ico|swf|css|js|html|htm)(\?[a-z0-9]+)?$")
  {
      unset req.http.Cookie;
  }

  # !! Do not cache application area
  if (req.url ~ "(^/app.php|^/app_dev.php|^)/([a-z]{2})/(payment|order|booking|media|autocomplete|monitor).*")
  {
      return (pass);
  }

  # !! Do not cache admin area
  if (req.url ~ "(^/app.php|^/app_dev.php|^)/admin" || req.url ~ "(^/app.php|^/app_dev.php|^)/(([a-z]{2})/admin)")
  {
      return (pass);
  }

  # !! Do not cache security area
  if (req.url ~ "(^/app.php|^/app_dev.php|^)/(([a-z]{2}/|)(login|logout|login_check).*)")
  {
      return (pass);
  }

  # Do not cache editor logged-in user sessions
  if (req.http.Cookie ~ "(sonata_page_is_editor)")
  {
      return (pass);
  }

  # Send Surrogate-Capability headers to announce ESI support to backend
  set req.http.Surrogate-Capability = "key=ESI/1.0";

  # Force no cache for active session
  if (req.http.Cookie ~ "SESS") {
        return(pass);
  }

  if (req.http.Authorization) {
    # Not cacheable by default
    return (pass);
  }

  <% if ! @iscached  -%>
  return (pass);
  <% end -%>

  # Normalize the query arguments
  set req.url = std.querysort(req.url);

  return (hash);
}

sub vcl_pipe {
  # Note that only the first request to the backend will have
  # X-Forwarded-For set.  If you use X-Forwarded-For and want to
  # have it set for all requests, make sure to have:
  # set bereq.http.connection = "close";
  # here.  It is not set by default as it might break some broken web
  # applications, like IIS with NTLM authentication.

  set bereq.http.Connection = "Close";

  # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)
      if (req.http.upgrade) {
          set bereq.http.upgrade = req.http.upgrade;
      }

  return (pipe);
}

sub vcl_pass {
  # return (pass);
}

# The data on which the hashing will take place
sub vcl_hash {
# Called after vcl_recv to create a hash value for the request. This is used as a key to look up the object in Varnish.

  hash_data(req.url);

  if (req.http.host) {
    hash_data(req.http.host);
  } else {
    hash_data(server.ip);
  }

  # hash cookies for requests that have them
  if (req.http.Cookie) {
    hash_data(req.http.Cookie);
  }
}

sub vcl_hit {
# Called when a cache lookup is successful.

  if (obj.ttl >= 0s) {
    # A pure unadultered hit, deliver it
    return (deliver);
  }

  # We have no fresh fish. Lets look at the stale ones.
  if (std.healthy(req.backend_hint)) {
    # Backend is healthy. Limit age to 10s.
        if (obj.ttl + 10s > 0s) {
            #set req.http.grace = "normal(limited)";
            return (deliver);
        } else {
            # No candidate for grace. Fetch a fresh object.
      return(fetch);
      }
  } else {
    # backend is sick - use full grace
        if (obj.ttl + obj.grace > 0s) {
            #set req.http.grace = "full";
      return (deliver);
    } else {
      # no graced object.
      return (fetch);
    }
  }


  # fetch & deliver once we get the result
  return (fetch); # Dead code, keep as a safeguard
}

sub vcl_miss {
  return (fetch);
}

# Handle the HTTP request coming from our backend
sub vcl_backend_response {
# Called after the response headers has been successfully retrieved from the backend.

  <% if @iscors -%>
  # rules for cross-domain requests
  set beresp.http.Access-Control-Allow-Origin = "*" ;
  set beresp.http.Access-Control-Allow-Methods = "GET,PUT,POST,DELETE,PATCH,OPTIONS" ;
  set beresp.http.Access-Control-Max-Age = "1";
  set beresp.http.Access-Control-Allow-Credentials = "true";
  set beresp.http.Access-Control-Allow-Headers = "accept, authorization";
  <% end -%>

  # Pause ESI request and remove Surrogate-Control header
  if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
    unset beresp.http.Surrogate-Control;
    set beresp.do_esi = true;
  }

  # Enable cache for all static files
  # The same argument as the static caches from above: monitor your cache size, if you get data nuked out of it, consider giving up the static file cache.
  # Before you blindly enable this, have a read here: https://ma.ttias.be/stop-caching-static-files/
  if (bereq.url ~ "^[^?]*\.(bmp|bz2|css|doc|eot|flv|gif|gz|ico|jpeg|jpg|js|less|mp[34]|pdf|png|rar|rtf|swf|tar|tgz|txt|wav|woff|xml|zip)(\?.*)?$") {
    unset beresp.http.set-cookie;
    set beresp.ttl = <%= @staticttl %>;
  }


  # Large static files are delivered directly to the end-user without
  # waiting for Varnish to fully read the file first.
  # Varnish 4 fully supports Streaming, so use streaming here to avoid locking.
  if (bereq.url ~ "^[^?]*\.(mp[34]|rar|tar|tgz|gz|wav|zip|bz2|xz|7z|avi|mov|ogm|mpe?g|mk[av])(\?.*)?$") {
    unset beresp.http.set-cookie;
    set beresp.do_stream = true;  # Check memory usage it'll grow in fetch_chunksize blocks (128k by default) if
            # the backend doesn't send a Content-Length header, so only enable it for big objects
    set beresp.do_gzip = false; # Don't try to compress it for storage
  }

  # Sometimes, a 301 or 302 redirect formed via Apache's mod_rewrite can mess with the HTTP port that is being passed along.
  # This often happens with simple rewrite rules in a scenario where Varnish runs on :80 and Apache on :8080 on the same box.
  # A redirect can then often redirect the end-user to a URL on :8080, where it should be :80.
  # This may need finetuning on your setup.
  #
  # To prevent accidental replace, we only filter the 301/302 redirects for now.
  if (beresp.status == 301 || beresp.status == 302) {
    set beresp.http.Location = regsub(beresp.http.Location, ":[0-9]+", "");
  }

  # Set 2min cache if unset for static files
  if (beresp.ttl <= 0s || beresp.http.Set-Cookie || beresp.http.Vary == "*") {
    set beresp.ttl = 120s; # Important, you shouldn't rely on this, SET YOUR HEADERS in the backend
    set beresp.uncacheable = true;
    return (deliver);
  }

  # Allow stale content, in case the backend goes down.
  # make Varnish keep all objects for 6 hours beyond their TTL
  set beresp.grace = 6h;

  return (deliver);
}

# The routine when we deliver the HTTP request to the user
# Last chance to modify headers that are sent to the client
sub vcl_deliver {
# Called before a cached object is delivered to the client.

  if (obj.hits > 0) { # Add debug header to see if it's a HIT/MISS and the number of hits, disable when not needed
    set resp.http.X-Cache = "HIT";
  } else {
    set resp.http.X-Cache = "MISS";
  }
  # Please note that obj.hits behaviour changed in 4.0, now it counts per objecthead, not per object
  # and obj.hits may not be reset in some cases where bans are in use. See bug 1492 for details.
  # So take hits with a grain of salt
  set resp.http.X-Cache-Hits = obj.hits;

  if ( resp.http.Cache-control ~ "public|private" ) {
    <% if @iscached && @isprod  -%>
    if (req.url !~ "^/[^?]+\.(pdf|doc|gz|zip|otf|lzma|bz2|tgz|tbz|jpg|jpeg|gif|png|css|js|swf)(\?.*|)") {
    <% end -%>
      unset resp.http.Etag;
      unset resp.http.Age;
      unset resp.http.Cache-Control;
      set resp.http.Cache-Control = "no-cache, no-store, max-age=0, must-revalidate";
    <% if @iscached && @isprod  -%>
    }
    <% end -%>
  }

  # Remove some headers: PHP version
  unset resp.http.X-Powered-By;

  # Remove some headers: Apache version & OS
  unset resp.http.Server;
  unset resp.http.X-Drupal-Cache;
  unset resp.http.X-Varnish;
  unset resp.http.Via;
  unset resp.http.Link;

  return (deliver);
}

sub vcl_purge {
    # restart request
    set req.http.X-Purge = "Yes";
    return(restart);
}

sub vcl_synth {
  if (resp.status == 401) {
  #set resp.http.Content-Type = "text/html; charset=utf-8";
  set resp.http.WWW-Authenticate = "Basic realm=Secured";
  return (deliver);
}

  if (resp.status == 720) {
    # We use this special error status 720 to force redirects with 301 (permanent) redirects
    # To use this, call the following from anywhere in vcl_recv: return (synth(720, "http://host/new.html"));
    set resp.http.Location = resp.reason;
    set resp.status = 301;
    return (deliver);
  } elseif (resp.status == 721) {
    # And we use error status 721 to force redirects with a 302 (temporary) redirect
    # To use this, call the following from anywhere in vcl_recv: return (synth(720, "http://host/new.html"));
    set resp.http.Location = resp.reason;
    set resp.status = 302;
    return (deliver);
  }

  return (deliver);
}


sub vcl_fini {
# Called when VCL is discarded only after all requests have exited the VCL. Typically used to clean up VMODs.

  return (ok);
}
